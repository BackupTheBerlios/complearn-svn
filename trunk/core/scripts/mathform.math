<<Calculus`VectorAnalysis`

(* first trying to understand function definition *)
SetCoordinates[Cartesian[x,y,z]]
(* case 1: assume sphere1 at origin, sphere2 at location x, sphere1 with velocity v *)
xv = {x -> {xx, xy, xz}, v->{vx, vy, vz} }
Unprotect[Dot];
Dot[n_?NumberQ, r_] := n r
Dot[r_, n_?NumberQ] := n r
Protect[Dot];
norm3d[x_,y_,z_] = Sqrt[x*x + y*y + z*z]
epot[x_,y_,z_] := Assuming[{Element[x, Reals], Element[y, Reals], Element[z, Reals]}, -1/norm3d[x,y,z]]
spot[x_,y_,z_] := Assuming[{Element[B, Reals], Element[LR, Reals]}, (1/2)*(norm3d[x,y,z] - LR)*(norm3d[x,y,z] - LR)* B]
tpot[x_,y_,z_] := epot[x,y,z] + spot[x,y,z]
grad2[f_]:={D[f[#1,#2],#1],D[f[#1,#2],#2]}&
grad3[f_]:=FullSimplify[Assuming[{Element[#1, Reals], Element[#2, Reals], Element[#3, Reals]}, {D[f[#1,#2,#3],#1],D[f[#1,#2,#3],#2],D[f[#1,#2,#3],#3]}]]&
FullSimplify[tpot[{x,y,z}]]
F[x_,y_,z_] := grad3[tpot][x,y,z]
TeXForm[FullSimplify[D[F[x,y,z].{1,0,0}, x]]]
(*TeXForm[FullSimplify[grad3[tpot][x,y,z]]]*)
(*
FullSimplify[Outer[D,epot[tx1]] ]
JacobianMatrix[f_List,x_List] := Outer[D,f,x]
normp[x_] = Norm[x, 2]
normsq[x_] = Times[Norm[x,2] , Norm[x,2]]
radius[x1_,x2_] = x2 - x1            (* radius from x1 towards x2 *)
normrad[x1_,x2_] = Times[(1.0/normp[radius[x1,x2]]), radius[x1,x2]]
invsq[x1_,x2_] = 1.0/normsq[x2-x1]     (* inverse square law *)
(* LR := 0.75 *)
(* LM := 1 *)
(* B = 0.1 *)
Element[LM, Reals]
invsqsafe[x1_,x2_] = 1/(Times[normp[x2-x1]+LM,normp[x2-x1]+LM])
coulsafe[x1_,x2_] = Times[invsqsafe[x1,x2], normrad[x1,x2]]
viscous[v_] = Times[B , v]
spring[x1_,x2_] = Times[(LR - normp[radius[x1,x2]]), normrad[x1,x2]] 
F[x1_, x2_, v1_] = viscous[v1] + coulsafe[x1,x2] + ISSPRING*spring[x1,x2]

dfdx1[x1_, x2_, v1_] := D[F[x1,x2,v1],x1]
dfdx1[x1,x2,v1]

(* TeXForm[FullSimplify[JacobianMatrix[{F[x1,x2,v]},{x1,x2,v}]]] *)
dfdx2[x1_, x2_, v1_] := D[F[x1,x2,v1],x2]
dfdx2[x1,x2,v1]

dfdv1[x1_, x2_, v1_] := Simplify[D[F[x1,x2,v1],v1], x1 != x2 ]
dfdv1[x1,x2,v1]
(* dfdv1[x1,x2,v1] *)

D[viscous[v1],v1]

TeXForm[Assuming[{x1=={a,b,c},x2=={a2,b2,c2}}, FullSimplify[D[normrad[x1,x2]*Times[1.0/(Norm[x2-x1,2]+LM),1.0/(Norm[x2-x1,2]+LM)],x1]]]]
(* Assuming[z1.z2 == z2.z1, FullSimplify[D[coulsafe[x1,x2],x1]]] *)
(* FullSimplify[D[coulsafe[x2,x1],x1]] *)
(* FullSimplify[D[coulsafe[x1,x2],x2]] *)
*)

requires 2.0.0
%headertop{
#ifndef __COMPLEARN_RCZLIB_H
#define __COMPLEARN_RCZLIB_H

#include <stdio.h>
#include <libintl.h>
#include "complearn.h"

struct ZlibDynamicAdaptorCB {
  int (*compress2)(unsigned char *dbuff,unsigned long *p,
    unsigned char *src, unsigned long sz, int level);
  int (*uncompress)(unsigned char *dbuff,unsigned long *p, unsigned char *src, unsigned long sz);
};

%}

%{
#include "complearn/complearn-rczlib.h"
#include "complearn/clconfig.h"
#ifdef HAVE_DLFCN_H
#include <dlfcn.h>
#endif

#ifdef HAVE_ZLIB_H
#include <zlib.h>
#endif

#if HAVE_ZLIB_H
static struct ZlibDynamicAdaptorCB zlibsda = {
  (int (*)(unsigned char *dbuff,unsigned long *p, unsigned char *src, unsigned long sz, int level) ) compress2,
  (int (*)(unsigned char *dbuff,unsigned long *p, unsigned char *src, unsigned long sz) ) uncompress
};
#else
static struct ZlibDynamicAdaptorCB zlibsda;
#endif

static struct ZlibDynamicAdaptorCB zlibdda;
static int haveTriedDL; /* Singleton */

struct ZlibDynamicAdaptorCB *complearn_grab_zlib_dacb(void) {
  if (zlibsda.compress2)
    return &zlibsda;
  if (!haveTriedDL) {
    void *lib_handle;
    haveTriedDL = 1;
#if HAVE_DLFCN_H
    lib_handle = dlopen("libz.so", RTLD_LAZY);
    if (lib_handle) {
      zlibdda.compress2= dlsym(lib_handle,"compress2");
      zlibdda.uncompress= dlsym(lib_handle,"uncompress");
    }
#endif
  }
  return zlibdda.compress2 ? &zlibdda : NULL;
}

static GString *priv_decompress(CompLearnRealCompressor *rc,const GString *src)
{
  struct ZlibDynamicAdaptorCB *zlib = complearn_grab_zlib_dacb();
  GString *result = NULL;
  if (zlib) {
    int i;
    unsigned char *dbuff = NULL;
    int triedp;
    triedp = src->len * 3.0 + 1;
    unsigned long p;
    do {
      if (dbuff != NULL)
        free(dbuff);
      p = triedp;
      dbuff = (unsigned char*)g_malloc(p);
      i = uncompress(dbuff, &p,src->str,src->len);
      triedp = 2*triedp;
      } while (i == -5);  /* Z_BUF_ERROR */
    if (i == 0) /* Z_OK */
      result = g_string_new_len(dbuff, p);
    if (dbuff)
      g_free(dbuff);
  }
  return result;
}

#define _( O ) gettext( O )
%}
class CompLearn:RCZLib from CompLearn:Real:Compressor:Adaptor
 (interface CompLearn:Real:Compressor)
{
  private int compression_level;
  property INT compression_level
                      (nick = _("Compression Level"),
                       blurb = _("Compression level for ZLib, 1-9"),
                       minimum = 1,
                       maximum = 9,
                       default_value = 9,
                       flags = CONSTRUCT,
                       link,
                       export);
  public G:Object *
  new(void) {
    GObject *ret = (GObject *) GET_NEW;
    return G_OBJECT (ret);
  }
  interface CompLearn:Real:Compressor public GString *
  compress(CompLearnRealCompressor *rc,const GString *src) {

    GString *result = NULL;
    struct ZlibDynamicAdaptorCB *zlib = complearn_grab_zlib_dacb();
    int s;

    unsigned char *dbuff;
    unsigned long p;

    if (zlib == NULL)
      return result;

    p = (int)(src->len*1.2) + 12;
  dbuff = (unsigned char*)g_malloc(p);
  s = (zlib->compress2)(dbuff,&p,src->str,src->len,complearn_rczlib_get_compression_level(COMPLEARN_RCZLIB(rc)));
  if (s != 0) {    /* Z_OK */
    g_error(_("Unknown error: zlibBuff returned %d"),s);
  }
  result = g_string_new_len(dbuff, p);
  g_free(dbuff);
  return result;
  }
  interface CompLearn:Real:Compressor public GString *
  decompress(CompLearnRealCompressor *rc,const GString *src) {
    return priv_decompress(rc, src);
  }
  interface CompLearn:Real:Compressor public GString *
  blurb(CompLearnRealCompressor *rc) {
    return g_string_new("Lempel-Ziv 77 zlib");
  }
  interface CompLearn:Real:Compressor public GString *
  name(CompLearnRealCompressor *rc) {
    return g_string_new("zlib");
  }
  interface CompLearn:Real:Compressor public GString *
  compressor_version(CompLearnRealCompressor *rc) {
    return g_string_new("1.2.3");
  }
  interface CompLearn:Real:Compressor public gboolean
  is_decompressible(CompLearnRealCompressor *rc, const GString *input) {
    if (input->len == 0 || (guchar) input->str[0] != 0x78)
      return FALSE;
    GString *t = priv_decompress(rc, input);
    if (t != NULL)
      g_string_free(t, TRUE);
    return t != NULL;
  }
  interface CompLearn:Real:Compressor public guint64
  window_size(CompLearnRealCompressor *rc) {
    return 32768*8;
  }
  interface CompLearn:Real:Compressor public gboolean
  is_operational(CompLearnRealCompressor *rc) {
    return complearn_grab_zlib_dacb() != NULL;
  }
}
%h{
#endif
%}

requires 2.0.0
%headertop{
#ifndef __COMPLEARN_RCBZLIB_H
#define __COMPLEARN_RCBZLIB_H

#include <stdio.h>
#include <stdlib.h>
#include "complearn-real-compressor-adaptor.h"
%}

%{

#include <libintl.h>
#include "complearn/complearn.h"
#include "complearn/complearn-rcbzlib.h"
#include "complearn/clconfig.h"

#ifdef HAVE_DLFCN_H
#include <dlfcn.h>
#endif

#if HAVE_BZLIB_H
#include <bzlib.h>
#endif

#include <string.h>


struct BZ2DynamicAdaptorCB {
  int (*buftobufcompress)(char *dbuff,unsigned int *p,
    char *src, unsigned int sz, int blocksize, int verblevel, int workfactor);
  int (*buftobufdecompress)(char *dbuff,unsigned int *p,
    char *src, unsigned int sz, int small, int verblevel);
};

static struct BZ2DynamicAdaptorCB *complearn_grab_bz2_dacb(void);

static char *unbz2a_shortname(void);


#if HAVE_BZLIB_H
static struct BZ2DynamicAdaptorCB bzlibsda = {
  BZ2_bzBuffToBuffCompress,
  BZ2_bzBuffToBuffDecompress
};
#else
static struct BZ2DynamicAdaptorCB bzlibsda;
#endif

static int haveTriedDL; /* Singleton */

static struct BZ2DynamicAdaptorCB *complearn_grab_bz2_dacb(void) {
  if (bzlibsda.buftobufcompress)
    return &bzlibsda;
  if (!haveTriedDL) {
    void *lib_handle;
    haveTriedDL = 1;
#if HAVE_DLFCN_H
    lib_handle = dlopen("libbz2.so", RTLD_LAZY);
    if (lib_handle) {
      bzlibsda.buftobufcompress= dlsym(lib_handle,"BZ2_bzBuffToBuffCompress");
      bzlibsda.buftobufdecompress= dlsym(lib_handle,"BZ2_bzBuffToBuffDecompress");
    }
#endif
  }
  return bzlibsda.buftobufcompress ? &bzlibsda : NULL;
}


#define _( O ) gettext( O )
static GString *priv_decompress(CompLearnRealCompressor *rc,const GString *src)
{
  struct BZ2DynamicAdaptorCB *bzlib = complearn_grab_bz2_dacb();
  GString *result = NULL;
  if (bzlib) {
    int i;
    unsigned char *dbuff = NULL;
    unsigned int p;
    unsigned int sp;
    p = src->len + 12;
    do {
      p = 2*p;
      if (dbuff != NULL)
        free(dbuff);
      dbuff = (unsigned char*)calloc(1,p);
      sp = p;
      i = (bzlib->buftobufdecompress)((char *) dbuff,(unsigned int *) &sp, (char *) src->str,src->len,
complearn_rcbzlib_get_small(COMPLEARN_RCBZLIB(rc)) ? 1 : 0,
complearn_rcbzlib_get_verbosity(COMPLEARN_RCBZLIB(rc)));
    } while (i == -8);  /* OUTBUF_FULL */
    if (i == 0)               /* OK */
      result = g_string_new_len(dbuff,sp);
    free(dbuff);
     } else {
      /* TODO: GError here */
     }
  return result;
}
%}
class CompLearn:RCBZLib from CompLearn:Real:Compressor:Adaptor
 (interface CompLearn:Real:Compressor)
{
  private gboolean small;
  property BOOLEAN small
                      (nick = _("small"),
                       blurb = _("Small memory footprint"),
                       default_value = FALSE,
                       flags = CONSTRUCT,
                       link,
                       export);
  private int verbosity;
  property INT verbosity
                      (nick = _("verbosity"),
                       blurb = _("BZip2 Verbosity Level"),
                       minimum = 0,
                       maximum = 4,
                       default_value = 0,
                       flags = CONSTRUCT,
                       link,
                       export);
  private int window_block_size;
  property INT window_block_size
                      (nick = _("window-block-size"),
                       blurb = _("Window size in 100000-byte chunks"),
                       minimum = 1,
                       maximum = 9,
                       default_value = 9,
                       flags = CONSTRUCT,
                       link,
                       export);
  private int work_factor;
  property INT work_factor
                      (nick = _("work-factor"),
                       blurb = _("Work factor for bzlib"),
                       minimum = 0,
                       maximum = 250,
                       default_value = 30,
                       flags = CONSTRUCT,
                       link,
                       export);
  public G:Object *
  new(void) {
    GObject *ret = (GObject *) GET_NEW;
    return G_OBJECT (ret);
  }
  interface CompLearn:Real:Compressor public GString *
  compress(CompLearn:Real:Compressor *rc,const GString *src) {
    GString *result = NULL;
    struct BZ2DynamicAdaptorCB *bzlib = complearn_grab_bz2_dacb();
    int s;

    unsigned char *dbuff;
    unsigned int p;

    if (bzlib == NULL)
      return result;

    p = (int)(src->len*1.2) + 200;
  dbuff = (unsigned char*)g_malloc(p);
  s = (bzlib->buftobufcompress)((char *) dbuff,&p,(char *) (src->str),src->len,
complearn_rcbzlib_get_window_block_size(COMPLEARN_RCBZLIB(rc)),
complearn_rcbzlib_get_verbosity(COMPLEARN_RCBZLIB(rc)),
complearn_rcbzlib_get_work_factor(COMPLEARN_RCBZLIB(rc)));
  if (s != 0) {    /* Z_OK */
    /* TODO: */
  }
  result = g_string_new_len(dbuff, p);
  g_free(dbuff);
  return result;
  }
  interface CompLearn:Real:Compressor public GString *
  decompress(CompLearnRealCompressor *rc,const GString *src) {
    return priv_decompress(rc, src);
  }
  interface CompLearn:Real:Compressor public GString *
  blurb(CompLearnRealCompressor *rc) {
    return g_string_new(_("libbz2 (a.k.a. bzlib) blocksort style"));
  }
  interface CompLearn:Real:Compressor public GString *
  name(CompLearnRealCompressor *rc) {
    return g_string_new("bzlib");
  }
  interface CompLearn:Real:Compressor public GString *
  compressor_version(CompLearnRealCompressor *rc) {
    return g_string_new("1.0.3");
  }
  interface CompLearn:Real:Compressor public gboolean
  is_decompressible(CompLearnRealCompressor *rc, const GString *input) {
    if (input->len < 3 || (guchar) input->str[0] != 0x42 ||
        (guchar) input->str[1] != 0x5a || (guchar) input->str[2] != 0x68)
      return FALSE;
    GString *t = priv_decompress(rc, input);
    if (t != NULL)
      g_string_free(t, TRUE);
    return t != NULL;
  }
  interface CompLearn:Real:Compressor public guint64
  window_size(CompLearnRealCompressor *rc) {
    return COMPLEARN_RCBZLIB(rc)->_priv->window_block_size*8*100000;
  }
  interface CompLearn:Real:Compressor public gboolean
  is_operational(CompLearnRealCompressor *rc) {
    return complearn_grab_bz2_dacb() != NULL;
  }
}
%h{
#endif
%}

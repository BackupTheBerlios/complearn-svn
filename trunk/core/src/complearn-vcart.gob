requires 2.0.0
%headertop{
#include <glib/garray.h>
#include "real-compressor.h"
#include "complearn-real-compressor-adaptor.h"
%}

%{
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <limits.h>
#include <string.h>
#include <assert.h>
#include <math.h>
#include <gmodule.h>
#include <libintl.h>

#define COMPRESSOR_NAME "art"

#define _(O) gettext(O)

G_MODULE_EXPORT const gchar* g_module_check_init(void *gm)
{
  complearn_vcart_new();
  return NULL;
}

struct ARTCompressionInstance {
  void *baseClass;
  int c[256];
};

static double simple_art_compress(const GString *inp)
{
  struct ARTCompressionInstance *artci = calloc(sizeof(*artci), 1);
  int sum = 0;
  int i;
  double codelen = 0.0;

  for (i = 0; i < 256 ; i++) {
    artci->c[i] = 1;
  }
  sum = 256;

  unsigned char *data = inp->str;
  for (i = 0; i < inp->len; i++) {
    unsigned char cur;
    double prob;
    cur = data[i];
    prob = ((double) artci->c[cur]) / ((double) sum);
    codelen -= log(prob);
    artci->c[cur] += 1;
    sum += 1;
  }
  free(artci);
  return codelen/log(2);
}


%}
class CompLearn:VCArt from CompLearn:Real:Compressor:Adaptor
 (interface CompLearn:Real:Compressor)
{
  public G:Object *
  new(void) {
    GObject *self = (GObject *) GET_NEW;
    SET_DEFAULT_PROPS(COMPRESSOR_NAME, COMPLEARN_VCART_GET_CLASS, self);
    return G_OBJECT (self);
  }
  interface CompLearn:Real:Compressor public GString *
  compress(CompLearnRealCompressor *rc,const GString *input) {
    return NULL;
  }
  interface CompLearn:Real:Compressor public GString *
  decompress(CompLearnRealCompressor *rc,const GString *input) {
    return NULL;
  }
  interface CompLearn:Real:Compressor public GString *
  blurb(CompLearnRealCompressor *rc) {
    return g_string_new(_("simple non-coding arirthmetic with fractional bit return"));
  }
  interface CompLearn:Real:Compressor public GString *
  name(CompLearnRealCompressor *rc) {
    return g_string_new(COMPRESSOR_NAME);
  }
  interface CompLearn:Real:Compressor public gboolean
  is_operational(CompLearnRealCompressor *rc) {
    return TRUE;
  }
  interface CompLearn:Real:Compressor public GString *
  compressor_version(CompLearnRealCompressor *rc) {
    return g_string_new("0.0.0");
  }
  interface CompLearn:Real:Compressor public GString *
  binding_version(CompLearnRealCompressor *rc) {
    return g_string_new("0.0.0");
  }
  interface CompLearn:Real:Compressor public gdouble
  compressed_size(CompLearnRealCompressor *rc, const GString *input) {
    return simple_art_compress(input);
  }
  interface CompLearn:Real:Compressor public gboolean
  is_just_size(CompLearnRealCompressor *rc) {
    return TRUE;
  }
}

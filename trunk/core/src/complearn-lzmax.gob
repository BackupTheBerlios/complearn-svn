requires 2.0.0
%headertop{
#include <glib/garray.h>
#include <libintl.h>
#include "real-compressor.h"
#include "complearn-real-compressor-adaptor.h"
#include "complearn-external-file-compressor.h"
%}

%{
#include <stdio.h>
#define _( O ) gettext( O )
#include "complearn/complearn-lzmax.h"
#include "complearn/complearn-lzmax-private.h"
#include "util.h"
#include <gmodule.h>

#define COMPRESSOR_NAME "lzmax"

G_MODULE_EXPORT const gchar* g_module_check_init(void *gm)
{
  complearn_lzmax_new();
  return NULL;
}

%}

class CompLearn:LzmaX from CompLearn:External:File:Compressor
 (interface CompLearn:Real:Compressor)
{
  private int work_level;
  property INT work_level
                      (nick = _("work-level"),
                       blurb = _("amount of cpu to use to compress [1,9]"),
                       minimum = 1,
                       maximum = 9,
                       default_value = 9,
                       flags = CONSTRUCT,
                       link,
                       export);
  public G:Object *
  new(void) {
    GObject *self = (GObject *) GET_NEW;
    SET_DEFAULT_PROPS(COMPRESSOR_NAME, COMPLEARN_LZMAX_GET_CLASS, self);
    return G_OBJECT (self);
  }
  interface CompLearn:Real:Compressor public G:String *
  decompress(CompLearn:Real:Compressor *rc, const G:String *input) {
CompLearnExternalFileCompressor *ec = COMPLEARN_EXTERNAL_FILE_COMPRESSOR(rc);
    g_assert(ec);
    char cmd[128];
    sprintf(cmd, "lzma -d inp.lzma");
    return complearn_external_file_compressor_transform_with_external_command(ec,cmd,input, "inp.lzma", "inp");
  }
  interface CompLearn:Real:Compressor public GString *
  compress(CompLearn:Real:Compressor *rc, const GString *input) {
  CompLearnExternalFileCompressor *ec = COMPLEARN_EXTERNAL_FILE_COMPRESSOR(rc);
    char cmd[128];
    sprintf(cmd, "lzma -z -%d inp",
complearn_lzmax_get_work_level(COMPLEARN_LZMAX(rc)));
    GString *result = complearn_external_file_compressor_transform_with_external_command(ec,cmd,input, "inp", "inp.lzma");
    return result;
  }
  interface CompLearn:Real:Compressor public gboolean
  is_operational(CompLearnRealCompressor *rc) {
    gboolean res = (g_find_program_in_path("lzma") != NULL);
    return res;
  }
  interface CompLearn:RealCompressor public GString *
  canonical_extension(CompLearn:RealCompressor *rc) {
    return g_string_new("lzma");
  }
  interface CompLearn:Real:Compressor public GString *
  name (CompLearnRealCompressor * rc)
{
    return g_string_new(COMPRESSOR_NAME);
}
  interface CompLearn:Real:Compressor public GString *
blurb (CompLearnRealCompressor * rc)
{
    return g_string_new(_("LZMA (Lempel Ziv Markov Chain)"));
}

}

requires 2.0.0
%headertop{
#include <glib/garray.h>
#include <libintl.h>
#include "real-compressor.h"
#include "complearn-real-compressor-adaptor.h"
%}

%{
#include <stdio.h>
#define _( O ) gettext( O )
#include <sys/types.h>
#include <sys/wait.h>
#include "complearn-hash-function.h"
#include "complearn-hash-function-private.h"
#include "util.h"
%}
class CompLearn:Hash:Function from CompLearn:Real:Compressor:Adaptor
 (interface CompLearn:Real:Compressor)
{
  private gboolean use_hex;
  property BOOLEAN use_hex
                      (nick = _("use_hex"),
                       blurb = _("convert hashed data to hexadecimal"),
                       default_value = TRUE,
                       flags = CONSTRUCT,
                       link,
                       export);
  public G:Object *
  new(void) {
    GObject *ret = (GObject *) GET_NEW;
    return G_OBJECT (ret);
  }

  interface CompLearn:Real:Compressor public GString *
  compress(CompLearnRealCompressor *rc, const GString *input) {
    GString *res = NULL;
    CompLearnHashFunction *clhf = COMPLEARN_HASH_FUNCTION(rc);
    GString *binhash = complearn_hash_function_hash(clhf, input);
    if (clhf->_priv->use_hex) {
      res = complearn_hash_function_convert_to_hex(binhash);
      g_string_free(binhash, TRUE);
    }
    else
      res = binhash;
    return res;
  }

  public GString *hash(CompLearn:Hash:Function *hf, const GString *inp) {
    g_error("Must override hash function");
    return NULL;
  }
  public GString *convert_to_hex(GString *inp) {
  char *hbuf;
  hbuf = calloc(inp->len+1, 2);
  int i;
  for (i = 0; i < inp->len; i += 1)
    sprintf(hbuf+i*2, "%02x", inp->str[i]);
  GString *result = g_string_new(hbuf);
  free(hbuf);
  return result;
  }

  interface CompLearn:Real:Compressor public gboolean
  is_hash_function(CompLearnRealCompressor *rc) {
    return TRUE;
  }

  interface CompLearn:Real:Compressor public gboolean
  is_decompressible(CompLearnRealCompressor *rc, const GString *input) {
    return FALSE;
  }

  interface CompLearn:Real:Compressor public gboolean
  is_operational(CompLearnRealCompressor *rc) {
    return TRUE;
  }
}
